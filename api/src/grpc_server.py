
import logging
from uuid import UUID
from concurrent import futures

import grpc
from dateutil.parser import parse, ParserError

from src.config import MAX_GRPC_WORKERS, GRPC_LISTEN_PORT, \
    PG_CREDS
from src.stubs import nethound_pb2_grpc
from src.stubs.nethound_pb2_grpc import NethoundServiceServicer
from src.stubs.nethound_pb2 import Status, NetworkStat
from src.persistence.timescale import insert_network_stat, \
    get_timeseries
from src.logic.utils import network_exists

LOGGER = logging.getLogger(__name__)


class gRPCService(NethoundServiceServicer):
    """Class with implementation for network
    stubs generated by gRPC protobuff stubs"""

    def StreamNetworkStats(self, request_iterator, context):
        """Method used to store incoming datapackets
        via gRPC stream."""

        LOGGER.info('received new connection to store network packets...')
        for i, request in enumerate(request_iterator, start=1):
            LOGGER.debug('processing packet %s for network %s', i, request.network_id)
            try:
                # parse network id into UUID instance
                network_id = UUID(request.network_id)
                ts = parse(request.event_timestamp)

                # if network does not exists, return not
                # found error
                if not network_exists(network_id):
                    LOGGER.error('unable to process request: network does not exist')
                    context.abort(grpc.StatusCode.NOT_FOUND, 'Cannot find specified network')

                insert_network_stat(PG_CREDS,
                                    network_id,
                                    ts,
                                    request.download_speed,
                                    request.exec_time,
                                    request.upload_speed if request.upload_tested else None)

            except (ValueError, ParserError):
                LOGGER.exception('unable to parse network ID or event timestamp')
                context.abort(grpc.StatusCode.INVALID_ARGUMENT, 'Invalid network ID or event timestamp')
        return Status(code=0, message='Successfully added data points')

    def StreamNetworkTimeseries(self, request, context):
        """Method used to stream network timeseries
        data points from timescale DB instance. Values
        are retrieved for a specific network ID and
        bounding timestamps.

        Args:
            request ([type]): [description]
            context ([type]): [description]

        Yields:
            [type]: [description]
        """

        try:
            network_id = UUID(request.network_id)
            # parse start and end timestamps from request
            # context. Note that end ts is optional
            start = parse(request.start_ts)
            end = parse(request.end_ts) if request.end_ts else None
        except ParserError:
            LOGGER.exception('unable to parse end/start date(s)')
            context.abort(grpc.StatusCode.INVALID_ARGUMENT)
        except (ValueError, TypeError):
            LOGGER.exception('unable to parse network ID')
            context.abort(grpc.StatusCode.INVALID_ARGUMENT)

        LOGGER.info('retreiving timeseries for %s over range %s - %s', network_id, start, end)
        # get all network stats as timeseries and stream responses
        for point in get_timeseries(PG_CREDS, network_id, start, end):
            stat = NetworkStat(network_id=str(network_id),
                               download_speed=point.download_speed,
                               upload_speed=point.upload_speed,
                               upload_tested=point.upload_speed is not None,
                               event_timestamp=point.event_timestamp.isoformat(),
                               exec_time=point.exec_time)
            yield stat


def new_server():
    """Function used to generate new server instance"""

    LOGGER.info('generating new gRPC server instance')
    # generate new server
    exec = futures.ThreadPoolExecutor(max_workers=MAX_GRPC_WORKERS)
    server = grpc.server(exec)
    # add server to gRPC server instance and add port

    nethound_pb2_grpc.add_NethoundServiceServicer_to_server(gRPCService(), server)
    server.add_insecure_port(f'[::]:{GRPC_LISTEN_PORT}')

    return server
